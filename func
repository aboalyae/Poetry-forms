"""
A poetry pattern:  tuple of (list of int, list of str)
  - first item is a list of the number of syllables required in each line
  - second item is a list describing the rhyme scheme rule for each line
"""

"""
A pronunciation dictionary: dict of {str: list of str}
  - each key is a word (a str)
  - each value is a list of phonemes for that word (a list of str)
"""

# ===================== Helper Functions =====================

def clean_up(s):
    """ (str) -> str

    Return a new string based on s in which all letters have been
    converted to uppercase and punctuation characters have been stripped
    from both ends. Inner punctuation is left untouched.

    >>> clean_up('Birthday!!!')
    'BIRTHDAY'
    >>> clean_up('"Quoted?"')
    'QUOTED'
    """

    punctuation = """!"'`@$%^&_-+={}|\\/,;:.-?)([]<>*#\n\t\r"""
    result = s.upper().strip(punctuation)
    return result


def counting_syllables(word,word_to_phonemes):
    """(str, dic) -> int

    Return an integer that represents the number of syllables in word. It does not
    matter whether the input word is upper- or lower-case.

    >>> counting_syllables(abduct)
    2  
    >>> counting_syllables(aBhoR)
    2
    """
    #This helper is meant to be used in check_rhyme_scheme, so word_to_phonemes
    #will be a dictionary that already exists.
    phoneme_list = word_to_phonemes[clean_up(word)]
    number_syllables = 0
    for phoneme in phoneme_list:
		#only syllables have a digit, so any phoneme string with a digit will
		#increase the number_syllables counter.
                if phoneme.endswith(('0','1','2')):
                        number_syllables += 1
    return number_syllables

def last_syllable_phoneme(phonemes):
    """ (list of strings) -> (list)
        
        Return a list of phonemes that contain the last syllable and the phonemes that follow it for a given word.

        >>> last_syllable_phoneme(['AH0', 'B', 'AH1', 'V'])
        ['AH1', 'V']
        """
    phoneme_syllable = []
    i=1
    #the while loop iterates backwards on the inputed phonemes list.
    while i <= len(phonemes):
                phoneme_syllable.append(phonemes[-i])
		#upon encountering the first syllable from the right of the phonemes list,
		#the function will add the syllable to phoneme_syllable and end.
                if '0' in phonemes[-i] or '1' in phonemes[-i] or '2' in phonemes[-i]:
                        return phoneme_syllable
                i += 1

# Add your helper functions here.


# ===================== Required Functions =====================

def count_lines(lst):
    r""" (list of str) -> int

    Precondition: each str in lst[:-1] ends in \n.

    Return the number of non-blank, non-empty strings in lst.

    >>> count_lines(['The first line leads off,\n', '\n', '  \n',
    ... 'With a gap before the next.\n', 'Then the poem ends.\n'])
    3
    """
    filtered_lst = []
    for string in lst:
                if string.strip() != '':
                        filtered_lst.append(string)
    return len(filtered_lst)


def get_poem_lines(poem):
    r""" (str) -> list of str

    Return the non-blank, non-empty lines of poem, with whitespace removed 
    from the beginning and end of each line.

    >>> get_poem_lines('The first line leads off,\n\n\n'
    ... + 'With a gap before the next.\nThen the poem ends.\n')
    ['The first line leads off,', 'With a gap before the next.', 'Then the poem ends.']
    """

    split_poem = poem.split('\n')
   
    lst=[]
    for string in split_poem:
                stripped_string = string.strip()
                if stripped_string != '':
                        lst.append(stripped_string)
    return lst

def check_syllables(poem_lines, pattern, word_to_phonemes):
    r""" (list of str, poetry pattern, pronunciation dictionary) -> list of str

    Precondition: len(poem_lines) == len(pattern[0])

    Return a list of lines from poem_lines that do not have the right number of
    syllables for the poetry pattern according to the pronunciation dictionary.
    If all lines have the right number of syllables, return the empty list.

    >>> poem_lines = ['The first line leads off,', 'With a gap before the next.', 'Then the poem ends.']
    >>> pattern = ([5, 5, 4], ['*', '*', '*'])
    >>> word_to_phonemes = {'NEXT': ['N', 'EH1', 'K', 'S', 'T'],
    ...                     'GAP': ['G', 'AE1', 'P'],
    ...                     'BEFORE': ['B', 'IH0', 'F', 'AO1', 'R'],
    ...                     'LEADS': ['L', 'IY1', 'D', 'Z'],
    ...                     'WITH': ['W', 'IH1', 'DH'],
    ...                     'LINE': ['L', 'AY1', 'N'],
    ...                     'THEN': ['DH', 'EH1', 'N'],
    ...                     'THE': ['DH', 'AH0'], 
    ...                     'A': ['AH0'], 
    ...                     'FIRST': ['F', 'ER1', 'S', 'T'], 
    ...                     'ENDS': ['EH1', 'N', 'D', 'Z'],
    ...                     'POEM': ['P', 'OW1', 'AH0', 'M'],
    ...                     'OFF': ['AO1', 'F']}
    >>> check_syllables(poem_lines, pattern, word_to_phonemes)
    ['With a gap before the next.', 'Then the poem ends.']
    >>> poem_lines = ['The first line leads off,']
    >>> check_syllables(poem_lines, ([0], ['*']), word_to_phonemes)
    []
    """
    unmatched_syllables = []
    for i in range(len(poem_lines)):
                lst = poem_lines[i].split()
                syllables = 0
		#the for loop will return the total # of syllables in a poem line.
                for word in lst:
                        syllables += counting_syllables(word,word_to_phonemes)
		#the if statement checks whether the number of syllables matches the pattern, and whether
		#syllables matter (i.e. if pattern[0][i] != 0).
                if not int(syllables) == int(pattern[0][i]) and int(pattern[0][i]) != 0:
                        unmatched_syllables.append(poem_lines[i])
    return unmatched_syllables

def check_rhyme_scheme(poem_lines, pattern, word_to_phonemes):
    r""" (list of str, poetry pattern, pronunciation dictionary) 
                                                        -> list of list of str

    Precondition: len(poem_lines) == len(pattern[1])

    Return a list of lists of lines from poem_lines that should rhyme with 
    each other but don't. If all lines rhyme as they should, return the empty 
    list.

    >>> poem_lines = ['The first line leads off,', 'With a gap before the next.', 'Then the poem ends.']
    >>> pattern = ([5, 7, 5], ['A', 'B', 'A'])
    >>> word_to_phonemes = {'NEXT': ['N', 'EH1', 'K', 'S', 'T'],
    ...                     'GAP': ['G', 'AE1', 'P'],
    ...                     'BEFORE': ['B', 'IH0', 'F', 'AO1', 'R'],
    ...                     'LEADS': ['L', 'IY1', 'D', 'Z'],
    ...                     'WITH': ['W', 'IH1', 'DH'],
    ...                     'LINE': ['L', 'AY1', 'N'],
    ...                     'THEN': ['DH', 'EH1', 'N'],
    ...                     'THE': ['DH', 'AH0'], 
    ...                     'A': ['AH0'], 
    ...                     'FIRST': ['F', 'ER1', 'S', 'T'], 
    ...                     'ENDS': ['EH1', 'N', 'D', 'Z'],
    ...                     'POEM': ['P', 'OW1', 'AH0', 'M'],
    ...                     'OFF': ['AO1', 'F']}
    >>> check_rhyme_scheme(poem_lines, pattern, word_to_phonemes)
    [['The first line leads off,', 'Then the poem ends.']]
    """
    unmatching_rhymes = []
    rhyme_dictionary = {}
    line_dictionary = {}
    for i in range(len(pattern[1])):
	#if the rhyme scheme letter (eg. 'A', 'B') isn't a key in rhyme_dictionary or line_dictionary, then this makes it a key.
        if pattern[1][i] not in rhyme_dictionary:
	    #we are looking for the last syllable and the phonemes that follow it in the last word of each poem line
            rhyme_dictionary[pattern[1][i]] = [last_syllable_phoneme(word_to_phonemes[clean_up((poem_lines[i].split()[-1]))])]
            line_dictionary[pattern[1][i]] = [poem_lines[i]]
        else:
            rhyme_dictionary[pattern[1][i]] = rhyme_dictionary[pattern[1][i]] + [last_syllable_phoneme(word_to_phonemes[clean_up((poem_lines[i].split()[-1]))])]
            line_dictionary[pattern[1][i]] = line_dictionary[pattern[1][i]] + [poem_lines[i]]
    for rhyme_letter in rhyme_dictionary.keys():
        i = 0
	#the if statement checks whether the rhyme scheme for the line matters
        if rhyme_letter != '*': 
            while i < len(rhyme_dictionary[rhyme_letter]):
                if rhyme_dictionary[rhyme_letter][i] != rhyme_dictionary[rhyme_letter][0]:
                    unmatching_rhymes.append(line_dictionary[rhyme_letter])
                    i = len(rhyme_dictionary[rhyme_letter])
                i = i+1
    return unmatching_rhymes                                
